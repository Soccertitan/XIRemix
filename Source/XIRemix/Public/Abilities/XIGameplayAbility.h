// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "Abilities/GameplayAbility.h"
#include "Abilities/GameplayAbilityTypes.h"
#include "XIRemix/XIRemix.h"
#include "XIEnums.h"
#include "DataAssets/XIAbilityData.h"
#include "XIGameplayAbility.generated.h"

/**
 * 
 */
UCLASS()
class XIREMIX_API UXIGameplayAbility : public UGameplayAbility
{
	GENERATED_BODY()

public:
	UXIGameplayAbility();

	// Abilities with this set will automatically activate when the input is pressed
	UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = "Ability")
	EXIAbilityInputID AbilityInputID = EXIAbilityInputID::None;

	// Value to associate an ability with an slot without tying it to an automatically activated input.
	// Passive abilities won't be tied to an input so we need a way to generically associate abilities with slots.
	UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = "Ability")
	EXIAbilityInputID AbilityID = EXIAbilityInputID::None;

	//The cost of the ability.
	float GetCost() const;

	//Gets the potency of the ability
	float GetPotency() const;

	//The enmity generated by the ability. Returns false if values should use ThreatTableComponents formula.
	bool GetEnmity(float OutCumulativeEnmity, float OutVolatileEnmity) const;

	//Used to apply a generic Cooldown GE that uses the GA's cooldown value.
	const FGameplayTagContainer* GetCooldownTags() const override;
	void ApplyCooldown(const FGameplayAbilitySpecHandle Handle, const FGameplayAbilityActorInfo* ActorInfo, const FGameplayAbilityActivationInfo ActivationInfo) const override;

	// If an ability is marked as 'ActivateAbilityOnGranted', activate them immediately when given here
	// Epic's comment: Projects may want to initiate passives or do other "BeginPlay" type of logic here.
	virtual void OnAvatarSet(const FGameplayAbilityActorInfo* ActorInfo, const FGameplayAbilitySpec& Spec) override;

	virtual bool DoesAbilitySatisfyTagRequirements(const UAbilitySystemComponent& AbilitySystemComponent, const FGameplayTagContainer* SourceTags, const FGameplayTagContainer* TargetTags, FGameplayTagContainer* OptionalRelevantTags) const override;

protected:
	
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Ability|Parameters")
	UXIAbilityData* XIAbilityData;

	// Adds the capsule radius to the range to ensure larger enemies can reach beyond the center of it's root.
	UPROPERTY(BlueprintReadOnly, Category = "Ability|Parameters")
	float CapsuleRadius;

	//The Targeted actor for the ability. 
	UPROPERTY(BlueprintReadWrite, Category = "Ability|Target")
	AActor* MainTarget;

	//The Montage used for the ability.
	UPROPERTY(BlueprintReadWrite, Category = "Ability|Parameters")
	UAnimMontage* AnimMontage;

	UPROPERTY(BlueprintReadOnly, Category = "Ability")
	AActor* AvatarActor;

	//Temp container that we will return the pointer to in GetCooldownTags().
	//This will be the union of our CooldownTags and the Cooldown GE's cooldown tags.
	UPROPERTY(Transient)
	FGameplayTagContainer TempCooldownTags;

	// Checks the target is within Range the correct attitute.
	UFUNCTION(BlueprintPure, Category = "XIRemix|Ability")
	bool IsTargetValid(AActor* SourceActorLocation, AActor* InTargetActor, float InRange, float InAngle, EXITeamAttitude InTargetAttitude) const;

	//Returns an array of valid actors to apply AoE effects too.
	UFUNCTION(BlueprintCallable, Category = "XIRemix|Ability")
	TArray <AActor* > GetSphereAreaEffectTargets(AActor* InActorSource, float InRange); 

	//Initializes Ability Parameters (AvatarActor, Range, Power, Cost, etc..). Should be called at the start of ActivateAbility
	UFUNCTION(BlueprintCallable, Category = "Ability|Parameters")
	void InitializeAbilityData();

	//Adds Abilities to the Target ASC
	UFUNCTION(BlueprintCallable, Category = "XIRemix|Ability")
	void GiveXIGameplayAbility(UAbilitySystemComponent* AbilitySystemComponent, TSubclassOf<UXIGameplayAbility> XIGameplayAbility, AActor* SourceActor);

	//Removes Abilities from Target ASC
	UFUNCTION(BlueprintCallable, Category = "XIRemix|Ability")
	void RemoveXIGameplayAbilities(UAbilitySystemComponent* AbilitySystemComponent, TArray<TSubclassOf<UXIGameplayAbility>> XIGameplayAbilities);

};
